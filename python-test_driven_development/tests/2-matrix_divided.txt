def matrix_divided(matrix, div):
    """Divides all elements of a matrix by a divisor.

    Args:
        matrix (list of lists): The matrix to be divided.
        div (int or float): The divisor.

    Returns:
        A new matrix with all elements divided by the divisor.

    Raises:
        TypeError: If the matrix is not a list of lists or if any element
                   inside the matrix is not an integer or float.
        TypeError: If the divisor is not an integer or float.
        ZeroDivisionError: If the divisor is zero.
        TypeError: If each row of the matrix doesn't have the same size.
    """

    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):
        raise TypeError("matrix must be a matrix (list of lists) of integers/floats")

    if not all(isinstance(num, (int, float)) for row in matrix for num in row):
        raise TypeError("matrix must be a matrix (list of lists) of integers/floats")

    if not isinstance(div, (int, float)):
        raise TypeError("div must be a number")

    if div == 0:
        raise ZeroDivisionError("division by zero")

    row_size = len(matrix[0])
    if any(len(row) != row_size for row in matrix):
        raise TypeError("Each row of the matrix must have the same size")

    return [[round(num / div, 2) for num in row] for row in matrix]


if __name__ == "__main__":
    matrix = [
        [1, 2, 3],
        [4, 5, 6]
    ]
    print(matrix_divided(matrix, 3))

    matrix = [
        [1, 2, 3, 4],
        [5, 6, 7]
    ]
    print(matrix_divided(matrix, 3))

    matrix = None
    print(matrix_divided(matrix, 3))

    matrix = []
    print(matrix_divided(matrix, 3))

    matrix = [[]]
    print(matrix_divided(matrix, 3))
